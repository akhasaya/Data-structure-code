# https://www.hackerrank.com/challenges/ctci-making-anagrams/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=strings
# making anagrams
# given two strings find how many characters have to be removed from each string to make them anagrams of each other
# Counter is a part of collections library - given an array it returns a hashmap of count of each element present 
# e.g. a = [ 1, 2, 3, 4, 3] => Counter(a) returns {1:1, 2:1, 3:2, 4:1} 
# works for string as well considering each character as an element of string

#!/bin/python3

import math
import os
import random
import re
import sys
from collections import Counter

# Complete the makeAnagram function below.
def makeAnagram(a, b):
    ca = Counter(a)
    cb = Counter(b)

    cc = ca - cb
    cd = cb - ca

    ce = cc + cd
    sum = 0 
    for elements in ce.keys():
        sum += ce[elements]

    return sum

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    a = input()

    b = input()

    res = makeAnagram(a, b)

    fptr.write(str(res) + '\n')

    fptr.close()
